geom_text_repel(
data = label.this,
aes(
label = factor ( label.this[[GENE_SYMBOL]])
),
point.padding = unit(.55, "lines"),
box.padding = unit(2.25, "lines"),
nudge_y = 0.5,
fontface=2,
color="black"
)
ggplot(result.gene, aes_string(ave.control ,ave.exp, col="class"))  +
scale_color_manual(values=c("up"=overexp_col, "no-change"=nochange_col, "down"=underexp_col), breaks=c("up", "down", "no-change"), labels=c(paste0("up in ",e,"(",nrow(result.gene [result.gene $class=='up',]),")"), paste0("down in ", e ,"(",nrow(result.gene[result.gene $class=='down',]),")"), "no-change")) +
geom_point() +
theme_bw()
ave.control
ave.exp
head ( result.gene )
ggplot(result.gene, aes_string(ave.control ,ave.exp, col="class"))
ggplot(result.gene, aes_string(ave.control ,"MMD-hem.ave", col="class"))
ggplot(result.gene, aes_string(ave.control ,ave.exp, col="class"), inherit.aes = FALSE )
test = result.gene
head ( test )
ggplot(result.gene, aes_string(ave.control ,"AVE", col="class"), inherit.aes = FALSE )
ggplot(result.gene, aes_string(ave.control ,"AVE", col="class"), inherit.aes = FALSE )  +
scale_color_manual(values=c("up"=overexp_col, "no-change"=nochange_col, "down"=underexp_col), breaks=c("up", "down", "no-change"), labels=c(paste0("up in ",e,"(",nrow(result.gene [result.gene $class=='up',]),")"), paste0("down in ", e ,"(",nrow(result.gene[result.gene $class=='down',]),")"), "no-change")) +
geom_point()
new.key
head ( new.key )
new.key$group = gsub ( "-",".", new.key$group)
unique ( new.key$group)
####
normal.color <- "#9BB3DF"
exp.color <- "#DCB335"
new.key$colorCodes <- normal.color
new.key[new.key[[exp.group]] == exp.this, ]$colorCodes <- exp.color
###
d.filter <- result.gene[result.gene$P.Value < p.val & result.gene$adj.P.Val < fdr & (result.gene$logFC > fold_thres | result.gene$logFC < -fold_thres )  ,]
mds.semi <-plotMDS( d.filter[,!colnames(d.filter) %in% r.sub  ]  )
mds.semi <- data.frame(x=mds.semi$x, y=mds.semi$y)
mds.gene <- ggplot( mds.semi , aes(x=x, y=y, shape= new.key[,g1], col=new.key[,g2] ))  +
geom_point(size=8) +
theme_bw() +
theme(legend.position="bottom", legend.title=element_blank(), legend.key = element_blank()) +
labs(x="Dimension 1", y="Dimension 2") + ggtitle(paste0(title1, " MDS Supervised") )
mds.gene
### heatmap
my_palette <- colorRampPalette(c("blue", "#f2f2f2", "#fc8600"))(n = 75)
par(mar=c(0,0,0,0))
# bottom, left, top and right
hm= d3heatmap(scale ( as.matrix( d.filter[,!colnames(d.filter) %in% rsub  ]  ) ), labRow=d.filter$gene,
ColSideColors = this.color, distfun = function(x) dist(x,method = 'euclidean'),
hclustfun= function(x) hclust(x,method = 'ward.D2')  )
my_palette <- colorRampPalette(c("blue", "#f2f2f2", "#fc8600"))(n = 75)
par(mar=c(10,0,0,0))
# bottom, left, top and right
heatmap3(as.matrix( d.filter[,!colnames(d.filter) %in% rsub  ]  ),
Rowv=F, dendrogram="column", density.info="none",
trace="none", key=TRUE, keysize=1.5, labRow=NA, cexCol=1.0, scale="row",
col = my_palette, showRowDendro=TRUE,   margins=c(8,2),
main= paste0(title1, " Heatmap" ), ColSideColor = new.key$colorCodes, ColSideLabs = "")
legend("right",legend=c(normal.this,exp.this),fill=c(normal.color,exp.color) )
hm2 <- recordPlot()
plot.new() ## clean up device
#### Scatterplot here
# scatter plot now
## prepping scatter plot
result.gene$class <- 'no-change'
result.gene[ result.gene$P.Value < p.val & (result.gene$logFC > fold_thres) & result.gene$adj.P.Val < fdr, ]$class <- 'up'
if ( nrow ( result.gene[ result.gene$P.Value < p.val & (result.gene$logFC < -fold_thres) & result.gene$adj.P.Val < fdr, ] ) > 0 ){
result.gene[ result.gene$P.Value < p.val & (result.gene$logFC < -fold_thres) & result.gene$adj.P.Val < fdr, ]$class  <- 'down'
}
##############
overexp_col <- '#fc8600'
underexp_col <- 'blue'
nochange_col <- '#F7F6F5'
c <- normal.this
e <- exp.this
# name of average
ave.control <- paste0(c,".ave")
ave.exp <- paste0(e,".ave")
# get all the colname from key sample.id needs to match that of data
id.control <- new.key[new.key[[exp.group]] %in% normal.this, sample.id]
id.exp <- new.key[new.key[[exp.group]] %in% exp.this, sample.id]
result.gene[[ave.exp]] <- rowMeans(result.gene[, id.exp  ] )
result.gene[[ave.control]] <- rowMeans(result.gene[, id.control ] )
result.gene$AVE <- rowMeans( result.gene[, c(  id.control , id.exp )] )
class <- "class"
result.gene <- result.gene[order(result.gene$adj.P.Val, result.gene$P.Value),]
if ( is.na (top10) ){
top10 <- head (result.gene[ !result.gene$class == "no-change" & !result.gene[[GENE_SYMBOL]] == "",  GENE_SYMBOL ],10 )
top10 <- unique (top10)
}
label.this <- result.gene[ result.gene[[GENE_SYMBOL]] %in% top10, ]
result.gene = df.mmd.hem
g1 = "group"
g2="group"
new.key = key.c.mmd.hem
r.sub = rsub
exp.group="group"; exp.this="MMD-hem"; normal.this= "Control"; sample.id="ID"; GENE_SYMBOL = "gene"; fdr=.05;  fold_thres = 0; title1 = "mmd.hem"; top10 =NA
new.key$group = gsub ( "-",".", new.key$group)
####
normal.color <- "#9BB3DF"
exp.color <- "#DCB335"
new.key$colorCodes <- normal.color
new.key[new.key[[exp.group]] == exp.this, ]$colorCodes <- exp.color
###
d.filter <- result.gene[result.gene$P.Value < p.val & result.gene$adj.P.Val < fdr & (result.gene$logFC > fold_thres | result.gene$logFC < -fold_thres )  ,]
result.gene = df.mmd.hem
g1 = "group"
g2="group"
new.key = key.c.mmd.hem
r.sub = rsub
exp.group="group"; exp.this="MMD-hem"; normal.this= "Control"; sample.id="ID"; GENE_SYMBOL = "gene"; fdr=.05;  fold_thres = 0; title1 = "mmd.hem"; top10 =NA
exp.this
exp.this = gsub ( "-",".", exp.this  )
new.key$group = gsub ( "-",".", new.key$group)
exp.this = gsub ( "-",".", exp.this  )
####
normal.color <- "#9BB3DF"
exp.color <- "#DCB335"
new.key$colorCodes <- normal.color
new.key[new.key[[exp.group]] == exp.this, ]$colorCodes <- exp.color
###
d.filter <- result.gene[result.gene$P.Value < p.val & result.gene$adj.P.Val < fdr & (result.gene$logFC > fold_thres | result.gene$logFC < -fold_thres )  ,]
mds.semi <-plotMDS( d.filter[,!colnames(d.filter) %in% r.sub  ]  )
mds.semi <- data.frame(x=mds.semi$x, y=mds.semi$y)
mds.gene <- ggplot( mds.semi , aes(x=x, y=y, shape= new.key[,g1], col=new.key[,g2] ))  +
geom_point(size=8) +
theme_bw() +
theme(legend.position="bottom", legend.title=element_blank(), legend.key = element_blank()) +
labs(x="Dimension 1", y="Dimension 2") + ggtitle(paste0(title1, " MDS Supervised") )
mds.gene
### heatmap
my_palette <- colorRampPalette(c("blue", "#f2f2f2", "#fc8600"))(n = 75)
par(mar=c(0,0,0,0))
# bottom, left, top and right
hm= d3heatmap(scale ( as.matrix( d.filter[,!colnames(d.filter) %in% rsub  ]  ) ), labRow=d.filter$gene,
ColSideColors = this.color, distfun = function(x) dist(x,method = 'euclidean'),
hclustfun= function(x) hclust(x,method = 'ward.D2')  )
my_palette <- colorRampPalette(c("blue", "#f2f2f2", "#fc8600"))(n = 75)
par(mar=c(10,0,0,0))
# bottom, left, top and right
heatmap3(as.matrix( d.filter[,!colnames(d.filter) %in% rsub  ]  ),
Rowv=F, dendrogram="column", density.info="none",
trace="none", key=TRUE, keysize=1.5, labRow=NA, cexCol=1.0, scale="row",
col = my_palette, showRowDendro=TRUE,   margins=c(8,2),
main= paste0(title1, " Heatmap" ), ColSideColor = new.key$colorCodes, ColSideLabs = "")
legend("right",legend=c(normal.this,exp.this),fill=c(normal.color,exp.color) )
hm2 <- recordPlot()
plot.new() ## clean up device
#### Scatterplot here
# scatter plot now
## prepping scatter plot
result.gene$class <- 'no-change'
result.gene[ result.gene$P.Value < p.val & (result.gene$logFC > fold_thres) & result.gene$adj.P.Val < fdr, ]$class <- 'up'
if ( nrow ( result.gene[ result.gene$P.Value < p.val & (result.gene$logFC < -fold_thres) & result.gene$adj.P.Val < fdr, ] ) > 0 ){
result.gene[ result.gene$P.Value < p.val & (result.gene$logFC < -fold_thres) & result.gene$adj.P.Val < fdr, ]$class  <- 'down'
}
##############
overexp_col <- '#fc8600'
underexp_col <- 'blue'
nochange_col <- '#F7F6F5'
c <- normal.this
e <- exp.this
# name of average
ave.control <- paste0(c,".ave")
ave.exp <- paste0(e,".ave")
# get all the colname from key sample.id needs to match that of data
id.control <- new.key[new.key[[exp.group]] %in% normal.this, sample.id]
id.exp <- new.key[new.key[[exp.group]] %in% exp.this, sample.id]
result.gene[[ave.exp]] <- rowMeans(result.gene[, id.exp  ] )
result.gene[[ave.control]] <- rowMeans(result.gene[, id.control ] )
result.gene$AVE <- rowMeans( result.gene[, c(  id.control , id.exp )] )
class <- "class"
result.gene <- result.gene[order(result.gene$adj.P.Val, result.gene$P.Value),]
if ( is.na (top10) ){
top10 <- head (result.gene[ !result.gene$class == "no-change" & !result.gene[[GENE_SYMBOL]] == "",  GENE_SYMBOL ],10 )
top10 <- unique (top10)
}
label.this <- result.gene[ result.gene[[GENE_SYMBOL]] %in% top10, ]
scatterplot1 <- ggplot(result.gene, aes_string(ave.control ,ave.exp, col="class"), inherit.aes = FALSE )  +
scale_color_manual(values=c("up"=overexp_col, "no-change"=nochange_col, "down"=underexp_col), breaks=c("up", "down", "no-change"), labels=c(paste0("up in ",e,"(",nrow(result.gene [result.gene $class=='up',]),")"), paste0("down in ", e ,"(",nrow(result.gene[result.gene $class=='down',]),")"), "no-change")) +
geom_point() +
theme_bw() +
theme(legend.position="bottom", legend.title=element_blank(), legend.key = element_blank()) +
labs(x=paste0(c ," average (log2 cpm)" ), y= paste0(e ," average (log2 cpm)" ) ) +
ggtitle(paste0(title1, "Scatter.plot ")) +
geom_text_repel(
data = label.this,
aes(
label = factor ( label.this[[GENE_SYMBOL]])
),
point.padding = unit(.55, "lines"),
box.padding = unit(2.25, "lines"),
nudge_y = 0.5,
fontface=2,
color="black"
)
scatterplot1
plot.post <- function (result.gene, g1,g2, new.key, r.sub,exp.group="group",exp.this="exp", normal.this="control", sample.id="sample.id",p.val=.05, fdr = .05, fold_thres = 1.5, top10 = NA, GENE_SYMBOL= "GENE_SYMBOL", title1="") {
new.key$group = gsub ( "-",".", new.key$group)
exp.this = gsub ( "-",".", exp.this  )
####
normal.color <- "#9BB3DF"
exp.color <- "#DCB335"
new.key$colorCodes <- normal.color
new.key[new.key[[exp.group]] == exp.this, ]$colorCodes <- exp.color
###
d.filter <- result.gene[result.gene$P.Value < p.val & result.gene$adj.P.Val < fdr & (result.gene$logFC > fold_thres | result.gene$logFC < -fold_thres )  ,]
mds.semi <-plotMDS( d.filter[,!colnames(d.filter) %in% r.sub  ]  )
mds.semi <- data.frame(x=mds.semi$x, y=mds.semi$y)
mds.gene <- ggplot( mds.semi , aes(x=x, y=y, shape= new.key[,g1], col=new.key[,g2] ))  +
geom_point(size=8) +
theme_bw() +
theme(legend.position="bottom", legend.title=element_blank(), legend.key = element_blank()) +
labs(x="Dimension 1", y="Dimension 2") + ggtitle(paste0(title1, " MDS Supervised") )
mds.gene
### heatmap
my_palette <- colorRampPalette(c("blue", "#f2f2f2", "#fc8600"))(n = 75)
par(mar=c(0,0,0,0))
# bottom, left, top and right
hm= d3heatmap(scale ( as.matrix( d.filter[,!colnames(d.filter) %in% rsub  ]  ) ), labRow=d.filter$gene,
ColSideColors = this.color, distfun = function(x) dist(x,method = 'euclidean'),
hclustfun= function(x) hclust(x,method = 'ward.D2')  )
my_palette <- colorRampPalette(c("blue", "#f2f2f2", "#fc8600"))(n = 75)
par(mar=c(10,0,0,0))
# bottom, left, top and right
heatmap3(as.matrix( d.filter[,!colnames(d.filter) %in% rsub  ]  ),
Rowv=F, dendrogram="column", density.info="none",
trace="none", key=TRUE, keysize=1.5, labRow=NA, cexCol=1.0, scale="row",
col = my_palette, showRowDendro=TRUE,   margins=c(8,2),
main= paste0(title1, " Heatmap" ), ColSideColor = new.key$colorCodes, ColSideLabs = "")
legend("right",legend=c(normal.this,exp.this),fill=c(normal.color,exp.color) )
hm2 <- recordPlot()
plot.new() ## clean up device
#### Scatterplot here
# scatter plot now
## prepping scatter plot
result.gene$class <- 'no-change'
result.gene[ result.gene$P.Value < p.val & (result.gene$logFC > fold_thres) & result.gene$adj.P.Val < fdr, ]$class <- 'up'
if ( nrow ( result.gene[ result.gene$P.Value < p.val & (result.gene$logFC < -fold_thres) & result.gene$adj.P.Val < fdr, ] ) > 0 ){
result.gene[ result.gene$P.Value < p.val & (result.gene$logFC < -fold_thres) & result.gene$adj.P.Val < fdr, ]$class  <- 'down'
}
##############
overexp_col <- '#fc8600'
underexp_col <- 'blue'
nochange_col <- '#F7F6F5'
c <- normal.this
e <- exp.this
# name of average
ave.control <- paste0(c,".ave")
ave.exp <- paste0(e,".ave")
# get all the colname from key sample.id needs to match that of data
id.control <- new.key[new.key[[exp.group]] %in% normal.this, sample.id]
id.exp <- new.key[new.key[[exp.group]] %in% exp.this, sample.id]
result.gene[[ave.exp]] <- rowMeans(result.gene[, id.exp  ] )
result.gene[[ave.control]] <- rowMeans(result.gene[, id.control ] )
result.gene$AVE <- rowMeans( result.gene[, c(  id.control , id.exp )] )
class <- "class"
result.gene <- result.gene[order(result.gene$adj.P.Val, result.gene$P.Value),]
if ( is.na (top10) ){
top10 <- head (result.gene[ !result.gene$class == "no-change" & !result.gene[[GENE_SYMBOL]] == "",  GENE_SYMBOL ],10 )
top10 <- unique (top10)
}
label.this <- result.gene[ result.gene[[GENE_SYMBOL]] %in% top10, ]
scatterplot1 <- ggplot(result.gene, aes_string(ave.control ,ave.exp, col="class"), inherit.aes = FALSE )  +
scale_color_manual(values=c("up"=overexp_col, "no-change"=nochange_col, "down"=underexp_col), breaks=c("up", "down", "no-change"), labels=c(paste0("up in ",e,"(",nrow(result.gene [result.gene $class=='up',]),")"), paste0("down in ", e ,"(",nrow(result.gene[result.gene $class=='down',]),")"), "no-change")) +
geom_point() +
theme_bw() +
theme(legend.position="bottom", legend.title=element_blank(), legend.key = element_blank()) +
labs(x=paste0(c ," average (log2 cpm)" ), y= paste0(e ," average (log2 cpm)" ) ) +
ggtitle(paste0(title1, "Scatter.plot ")) +
geom_text_repel(
data = label.this,
aes(
label = factor ( label.this[[GENE_SYMBOL]])
),
point.padding = unit(.55, "lines"),
box.padding = unit(2.25, "lines"),
nudge_y = 0.5,
fontface=2,
color="black"
)
###
ma_p_h <- ggplot(result.gene , aes(x=AVE,y=logFC, col=factor(class) ) )+
scale_color_manual(values=c("up"=overexp_col, "no-change"=nochange_col, "down"=underexp_col), breaks=c("up", "down", "no-change"), labels=c(paste0("up in ",e,"(",nrow(result.gene [result.gene $class=='up',]),")"), paste0("down in ", e ,"(",nrow(result.gene[result.gene $class=='down',]),")"), "no-change")) +
scale_size_manual(guide="none", values=c("N"=1, "Y"=5)) +
scale_alpha_manual(guide="none", values=c("N"=0.3, "Y"=1)) +
#scale_shape_manual(breaks='Y',label='KRAS',values=c("Y"=17,"N"=16))+
geom_point() +
theme_bw() +
theme(legend.position="bottom", legend.title=element_blank(), legend.key = element_blank()) +
labs(x="Ave Expression", y="FC-log2") +
ggtitle(paste0(title1, " MA ")) +
geom_text_repel(
data = label.this,
aes(
label = factor ( factor ( label.this[[GENE_SYMBOL]])  )
),
point.padding = unit(2.55, "lines"),
box.padding = unit(2.25, "lines"),
nudge_y = 0.5,
fontface=1,
color="black"
)
### volcano
volcano.g <- ggplot(result.gene , aes(logFC, -log10(P.Value))) +
geom_point(aes(col=class)) +
scale_color_manual(values=c(underexp_col, 'black',overexp_col) , name="sig", breaks = c('up','down','no-change'), labels = c(paste0("up in ",e,"(",nrow(result.gene [result.gene $class=='up',]),")"), paste0("down in ", e ,"(",nrow(result.gene[result.gene $class=='down',]),")"), "no-change") ) +
ggtitle(paste0(title1, " Volcano.plot ")) +
geom_text_repel(
data = label.this,
aes(
label = factor ( label.this[[GENE_SYMBOL]])
),
fontface=2,
color="red",
point.padding = unit(.25, "lines"),
box.padding = unit(.25, "lines"),
nudge_y = 0.1
) +theme_bw(base_size = 20)  +  theme(legend.text=element_text(size=15)) + guides(color = guide_legend(override.aes = list(size=10)))
pm <- list (
mds = mds.gene,
hm = hm, hmstat = hm2,
scatter = scatterplot1,
ma = ma_p_h,
volcano = volcano.g,
data = result.gene
)
return (pm)
}
post.mmd.hem <- plot.post ( df.mmd.hem, "group", "group" , key.c.mmd.hem, rsub, exp.group="group", exp.this="MMD-hem", normal.this= "Control", sample.id="ID", GENE_SYMBOL = "gene", fdr=.05, fold_thres = 0, title1 = "mmd.hem", top10 =NA)
post.mmd.hem$hmstat
post.mmd.hem$hm
result.gene$logFC
post.mmd.hem <- plot.post ( df.mmd.hem, "group", "group" , key.c.mmd.hem, rsub, exp.group="group", exp.this="MMD-hem", normal.this= "Control", sample.id="ID", GENE_SYMBOL = "gene", fdr=.05, fold_thres = .20, title1 = "mmd.hem", top10 =NA)
post.mmd.hem$hm
post.mmd.hem$data
post.mmd.hem$data$adj.P.Val
fdr = data.frame ( gene=df.mmd.isch$gene, fdr = df.mmd.isch$p.tukey )
fdr
merge ( fdr, df.mmd.isch, by="gene")
df.mmd.isch = merge ( fdr, df.mmd.isch, by="gene")
# P.Value < p.val & result.gene$adj.P.Val < fdr & (result.gene$logFC
colnames ( df.mmd.isch )[2:4] = c("adj.P.Val","logFC","P.Value")
rsub = colnames ( df.mmd.isch[1:4])
this.color = key.c.mmd.isch$color
post.mmd.isch <- plot.post ( df.mmd.isch, "group", "group" , key.c.mmd.isch, rsub, exp.group="group", exp.this="MMD-isch", normal.this= "Control", sample.id="ID", GENE_SYMBOL = "gene", fdr=.05, fold_thres = .20, title1 = "mmd.isch", top10 =NA)
unique ( key.c.mmd.isch$group)
post.mmd.isch <- plot.post ( df.mmd.isch, "group", "group" , key.c.mmd.isch, rsub, exp.group="group", exp.this="MMD-ischemic", normal.this= "Control", sample.id="ID", GENE_SYMBOL = "gene", fdr=.05, fold_thres = .20, title1 = "mmd.isch", top10 =NA)
post.mmd.isch$hm
unique ( post.mmd.isch$data$class)
shared.dge = intersect (unique ( dge.c.mmd.isch$gene ), unique ( dge.c.mmd.hem$gene ) )
main.sub = main [ row.names ( main ) %in% shared.dge, ]
head ( main.sub  )
par(mar=c(5,2,5,10))
d2 <- dist(t ( main.sub ) , method = "manhattan") # manhattan
fit2 <- hclust(d2, method="ward.D2")
dend <- as.dendrogram(fit2)
# plot first to guess how many branches to cut.  Statistically we can us gapstat but its not necessary here
km =  4
dend2 <- color_branches(dend, k = km , col =  getPalette (km) )  %>% dendextend::set("branches_lwd", c(8))
# if you plot now then you will get color of each branch, plot ( dend1, horiz=T)
hdf = data.frame ( cutree(fit2, k = km) )
colnames(hdf) = "sample"
color.group =  key2$color
names ( color.group )= unique ( key2$group )
par(mar=c(5,5,5,10))
# bottom, left, top and right
plot ( dend2, horiz=T)
colored_bars(colors = cbind ( Group = color.group ), dend = dend1, sort_by_labels_order = TRUE, horiz = T)
par(mar=c(5,2,5,10))
d2 <- dist(t ( main.sub ) , method = "euclidean") # manhattan euclidean
fit2 <- hclust(d2, method="ward.D2")
dend <- as.dendrogram(fit2)
# plot first to guess how many branches to cut.  Statistically we can us gapstat but its not necessary here
km =  4
dend2 <- color_branches(dend, k = km , col =  getPalette (km) )  %>% dendextend::set("branches_lwd", c(8))
# if you plot now then you will get color of each branch, plot ( dend1, horiz=T)
hdf = data.frame ( cutree(fit2, k = km) )
colnames(hdf) = "sample"
color.group =  key2$color
names ( color.group )= unique ( key2$group )
par(mar=c(5,5,5,10))
# bottom, left, top and right
plot ( dend2, horiz=T)
colored_bars(colors = cbind ( Group = color.group ), dend = dend1, sort_by_labels_order = TRUE, horiz = T)
main.sub = main [ row.names ( main ) %in% shared.dge, ]
par(mar=c(5,2,5,10))
d2 <- dist(t ( main.sub ) , method = "euclidean") # manhattan euclidean
fit2 <- hclust(d2, method="ward.D2")
dend <- as.dendrogram(fit2)
# plot first to guess how many branches to cut.  Statistically we can us gapstat but its not necessary here
km =  2
dend2 <- color_branches(dend, k = km , col =  getPalette (km) )  %>% dendextend::set("branches_lwd", c(8))
# if you plot now then you will get color of each branch, plot ( dend1, horiz=T)
hdf = data.frame ( cutree(fit2, k = km) )
colnames(hdf) = "sample"
color.group =  key2$color
names ( color.group )= unique ( key2$group )
par(mar=c(5,5,5,10))
# bottom, left, top and right
plot ( dend2, horiz=T)
colored_bars(colors = cbind ( Group = color.group ), dend = dend1, sort_by_labels_order = TRUE, horiz = T)
main.sub = main [ row.names ( main ) %in% shared.dge, ]
par(mar=c(5,2,5,10))
d2 <- dist(t ( main.sub ) , method = "euclidean") # manhattan euclidean
fit2 <- hclust(d2, method="ward.D2")
dend <- as.dendrogram(fit2)
# plot first to guess how many branches to cut.  Statistically we can us gapstat but its not necessary here
km =  3
dend2 <- color_branches(dend, k = km , col =  getPalette (km) )  %>% dendextend::set("branches_lwd", c(8))
# if you plot now then you will get color of each branch, plot ( dend1, horiz=T)
hdf = data.frame ( cutree(fit2, k = km) )
colnames(hdf) = "sample"
color.group =  key2$color
names ( color.group )= unique ( key2$group )
par(mar=c(5,5,5,10))
# bottom, left, top and right
plot ( dend2, horiz=T)
colored_bars(colors = cbind ( Group = color.group ), dend = dend1, sort_by_labels_order = TRUE, horiz = T)
head ( post.mmd.hem$data )
t1 = post.mmd.hem$data
t2 = post.mmd.isch$data
t1 = t1[t1$class != "no-change", ]
t1
t1 = t1[ order (-abs(t1$logFC)), ]
head ( t1 )
gk = c('PDGFBB','RESISTIN','IL7')
g = plot.gene ( main [row.names(main) %in% gk,], key.single=key2, ptext="",title= gk, pid="ID", key.c="group", add=0)
g
t2 = t2[t2$class != "no-change", ]
t2 = t2[ order (-abs(t2$logFC)), ]
tt = unique ( t1$gene[1:10], t2$gene[1:10])
tt
tt = as.character ( unique ( t1$gene[1:10], t2$gene[1:10]) )
gk = tt
g = plot.gene ( main [row.names(main) %in% gk,], key.single=key2, ptext="",title= gk, pid="ID", key.c="group", add=0)
g
plot.gene <- function (temp, key.single, ptext='',title='', yl="log2", add=0, pid="tube", key.c="group",vps= 10, ytitle="log2"  ) {
temp <- melt (as.matrix ( temp )  )
colnames ( temp ) = c("gene","variable","value")
temp$group <- sapply(temp$variable, function(x) key.single[key.single[[pid]] == x, key.c ])
temp$pid <- sapply(temp$variable, function(x) key.single[key.single[[pid]] == x, pid ])
colsingl <- getPalette ( length (  unique ( temp$group )  ))
# create color scheme
nu <- as.character(factor( temp$group ,labels=colsingl))
temp$group <- factor (temp$group, levels = unique (temp$group))
mean.temp <- temp %>% group_by(group ) %>%
summarise(
mean = mean(value)
) %>%
data.frame()
temp$meangroup <- sapply(temp$group, function(x) mean.temp[mean.temp$group == x, ]$mean )
temp$dumm <- "mean"
yp <- max( temp$meangroup)
g <- ggplot(temp, aes(x=factor ( group) , y=value, fill= variable)) +
geom_bar( stat = "identity", position = position_dodge(), colour='grey' ) +
scale_fill_manual(values = nu  ) +
theme(legend.position="none", legend.title=element_blank(), legend.key = element_blank(),
axis.text.x = element_text(angle = 0, size=15.5),
axis.text.y = element_text(size=15.5)
)  +
scale_colour_manual(name="",values = "black") +
xlab("Groups") + ylab(yl) + ggtitle(title)  +facet_wrap(gene~., ncol=2, scales = "free")
g2 = ggplot(temp, aes(x=factor ( group) , y=value )) +
geom_violin()+
#geom_point(size=1, aes( colour=state2) ) +
geom_jitter(shape=19, position=position_jitter(0.07), aes( colour=group) , size = vps, alpha= .5) +
theme_bw() +
ggtitle( title ) +
ylab( ytitle) +
xlab("")  +
theme(legend.position="bottom", legend.title=element_blank(), legend.key = element_blank(),
#axis.text.x = element_blank(),
#axis.text.y = element_blank(), # comment this out to display cancer.subtype
axis.text.y = element_text(size=12),
axis.text.x = element_text(size=15),
axis.title.x = element_text(size=22),
axis.title.y     = element_text(size=22),
legend.text      =element_text(size=12)
) + scale_color_manual(values = unique ( nu)) +
stat_summary(fun.y = mean, fun.ymin = mean, fun.ymax = mean,
geom = "crossbar", width = .5) +facet_wrap(gene~., ncol=2)
bee = ggplot(temp, aes(x=factor ( group) , y=value )) +
geom_quasirandom(aes(fill = group ), size = vps, shape = 21, alpha = .5) +
#geom_violin()+
#geom_point(size=1, aes( colour=state2) ) +
#geom_jitter(shape=19, position=position_jitter(0.07), aes( colour=group) , size = vps, alpha= .5) +
theme_bw() +
ggtitle( title ) +
ylab( ytitle) +
xlab("")  +
theme(legend.position="bottom", legend.title=element_blank(), legend.key = element_blank(),
#axis.text.x = element_blank(),
#axis.text.y = element_blank(), # comment this out to display cancer.subtype
axis.text.y = element_text(size=12),
axis.text.x = element_text(size=15),
axis.title.x = element_text(size=22),
axis.title.y     = element_text(size=22),
legend.text      =element_text(size=12)
) + scale_color_manual(values = unique ( nu)) +
stat_summary(fun.y = mean, fun.ymin = mean, fun.ymax = mean,
geom = "crossbar", width = .5) +facet_wrap(gene~., ncol=2)
return ( list ( g=g, violin=g2, bee= bee ) )
}
plot.gene ( main [row.names(main) %in% gk,], key.single=key2, ptext="",title= gk, pid="ID", key.c="group", add=0,
vps=2)$bee
post.mmd.hem$volcano
post.mmd.hem$ma
post.mmd.isch$scatter
