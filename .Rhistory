## plot density curve
b = boxplot(df.data, las=2, col="lightblue", main="log2 (cpm + 1) after normalization")
plot ( b)
temp = df.data
temp = melt ( temp )
head ( temp )
colnames(temp) = c("sample", "ID", "value")
head ( temp )
ggplot(temp, aes(y=value, x=ID)) +
geom_violin()+
geom_jitter(shape=19, position=position_jitter(0.07), aes( colour=state), size=1 ) +
theme_bw() +
ggtitle("box plot unnormalize") +
ylab(" ") +
xlab("") +
theme(legend.position="bottom", legend.title=element_blank(), legend.key = element_blank(),
axis.text.y = element_text(size=12),
axis.text.x = element_text(angle = 90, size=11.5),
axis.title.x = element_text(size=22),
axis.title.y     = element_text(size=22),
legend.text      =element_text(size=12)
) + stat_summary(fun.y = mean, fun.ymin = mean, fun.ymax = mean,
geom = "crossbar", width = .5)
temp$group = as.character ( sapply ( temp$ID,  function(x)  unique ( key [ key$ID  == x, ]$group)  ) )
ggplot(temp, aes(y=value, x=ID)) +
geom_violin()+
geom_jitter(shape=19, position=position_jitter(0.07), aes( colour=group), size=1 ) +
theme_bw() +
ggtitle("box plot unnormalize") +
ylab(" ") +
xlab("") +
theme(legend.position="bottom", legend.title=element_blank(), legend.key = element_blank(),
axis.text.y = element_text(size=12),
axis.text.x = element_text(angle = 90, size=11.5),
axis.title.x = element_text(size=22),
axis.title.y     = element_text(size=22),
legend.text      =element_text(size=12)
) + stat_summary(fun.y = mean, fun.ymin = mean, fun.ymax = mean,
geom = "crossbar", width = .5)
ggplot(temp, aes(y=value, x=ID)) +
geom_violin()+
geom_jitter(shape=19, position=position_jitter(0.07), aes( colour=group), size=1, alpha = .5 ) +
theme_bw() +
ggtitle("box plot unnormalize") +
ylab(" ") +
xlab("") +
theme(legend.position="bottom", legend.title=element_blank(), legend.key = element_blank(),
axis.text.y = element_text(size=12),
axis.text.x = element_text(angle = 90, size=11.5),
axis.title.x = element_text(size=22),
axis.title.y     = element_text(size=22),
legend.text      =element_text(size=12)
) + stat_summary(fun.y = mean, fun.ymin = mean, fun.ymax = mean,
geom = "crossbar", width = .5)
# function plots violin plots for each sample  ( column ) in data.frame
boxv <- function ( temp ){
temp = df.data
temp = melt ( temp )
colnames(temp) = c("sample", "ID", "value")
temp$group = as.character ( sapply ( temp$ID,  function(x)  unique ( key [ key$ID  == x, ]$group)  ) )
ggplot(temp, aes(y=value, x=ID)) +
geom_violin()+
geom_jitter(shape=19, position=position_jitter(0.07), aes( colour=group), size=1, alpha = .5 ) +
theme_bw() +
ggtitle("box plot unnormalize") +
ylab(" ") +
xlab("") +
theme(legend.position="bottom", legend.title=element_blank(), legend.key = element_blank(),
axis.text.y = element_text(size=12),
axis.text.x = element_text(angle = 90, size=11.5),
axis.title.x = element_text(size=22),
axis.title.y     = element_text(size=22),
legend.text      =element_text(size=12)
) + stat_summary(fun.y = mean, fun.ymin = mean, fun.ymax = mean,
geom = "crossbar", width = .5)
return ( temp )
}
temp = df.data
temp = melt ( temp )
colnames(temp) = c("sample", "ID", "value")
temp$group = as.character ( sapply ( temp$ID,  function(x)  unique ( key.temp [ key.temp$ID  == x, ]$group)  ) )
ggplot(temp, aes(y=value, x=ID)) +
geom_violin()+
geom_jitter(shape=19, position=position_jitter(0.07), aes( colour=group), size=1, alpha = .5 ) +
theme_bw() +
ggtitle("box plot unnormalize") +
ylab(" ") +
xlab("") +
theme(legend.position="bottom", legend.title=element_blank(), legend.key = element_blank(),
axis.text.y = element_text(size=12),
axis.text.x = element_text(angle = 90, size=11.5),
axis.title.x = element_text(size=22),
axis.title.y     = element_text(size=22),
legend.text      =element_text(size=12)
) + stat_summary(fun.y = mean, fun.ymin = mean, fun.ymax = mean,
geom = "crossbar", width = .5)
boxv <- function ( temp ){
temp = df.data
temp = melt ( temp )
colnames(temp) = c("sample", "ID", "value")
temp$group = as.character ( sapply ( temp$ID,  function(x)  unique ( key.temp [ key.temp$ID  == x, ]$group)  ) )
ggplot(temp, aes(y=value, x=ID)) +
geom_violin()+
geom_jitter(shape=19, position=position_jitter(0.07), aes( colour=group), size=1, alpha = .5 ) +
theme_bw() +
ggtitle("box plot unnormalize") +
ylab(" ") +
xlab("") +
theme(legend.position="bottom", legend.title=element_blank(), legend.key = element_blank(),
axis.text.y = element_text(size=12),
axis.text.x = element_text(angle = 90, size=11.5),
axis.title.x = element_text(size=22),
axis.title.y     = element_text(size=22),
legend.text      =element_text(size=12)
) + stat_summary(fun.y = mean, fun.ymin = mean, fun.ymax = mean,
geom = "crossbar", width = .5)
return ( temp )
}
boxv( df.data, key )
# function plots violin plots for each sample  ( column ) in data.frame
# you need to provide a key where there is a column ID matching to a column called group, this will color code the group
boxv <- function ( temp, key.temp ){
temp = melt ( temp )
colnames(temp) = c("sample", "ID", "value")
temp$group = as.character ( sapply ( temp$ID,  function(x)  unique ( key.temp [ key.temp$ID  == x, ]$group)  ) )
ggplot(temp, aes(y=value, x=ID)) +
geom_violin()+
geom_jitter(shape=19, position=position_jitter(0.07), aes( colour=group), size=1, alpha = .5 ) +
theme_bw() +
ggtitle("box plot unnormalize") +
ylab(" ") +
xlab("") +
theme(legend.position="bottom", legend.title=element_blank(), legend.key = element_blank(),
axis.text.y = element_text(size=12),
axis.text.x = element_text(angle = 90, size=11.5),
axis.title.x = element_text(size=22),
axis.title.y     = element_text(size=22),
legend.text      =element_text(size=12)
) + stat_summary(fun.y = mean, fun.ymin = mean, fun.ymax = mean,
geom = "crossbar", width = .5)
return ( temp )
}
boxv( df.data, key )
boxv <- function ( temp, key.temp ){
temp = melt ( temp )
colnames(temp) = c("sample", "ID", "value")
temp$group = as.character ( sapply ( temp$ID,  function(x)  unique ( key.temp [ key.temp$ID  == x, ]$group)  ) )
g1 = ggplot(temp, aes(y=value, x=ID)) +
geom_violin()+
geom_jitter(shape=19, position=position_jitter(0.07), aes( colour=group), size=1, alpha = .5 ) +
theme_bw() +
ggtitle("box plot unnormalize") +
ylab(" ") +
xlab("") +
theme(legend.position="bottom", legend.title=element_blank(), legend.key = element_blank(),
axis.text.y = element_text(size=12),
axis.text.x = element_text(angle = 90, size=11.5),
axis.title.x = element_text(size=22),
axis.title.y     = element_text(size=22),
legend.text      =element_text(size=12)
) + stat_summary(fun.y = mean, fun.ymin = mean, fun.ymax = mean,
geom = "crossbar", width = .5)
return ( g1 )
}
boxv( df.data, key )
title=""
boxv <- function ( temp, key.temp, title="" ){
temp = melt ( temp )
colnames(temp) = c("sample", "ID", "value")
temp$group = as.character ( sapply ( temp$ID,  function(x)  unique ( key.temp [ key.temp$ID  == x, ]$group)  ) )
g1 = ggplot(temp, aes(y=value, x=ID)) +
geom_violin()+
geom_jitter(shape=19, position=position_jitter(0.07), aes( colour=group), size=1, alpha = .5 ) +
theme_bw() +
ggtitle( title ) +
ylab(" ") +
xlab("") +
theme(legend.position="bottom", legend.title=element_blank(), legend.key = element_blank(),
axis.text.y = element_text(size=12),
axis.text.x = element_text(angle = 90, size=11.5),
axis.title.x = element_text(size=22),
axis.title.y     = element_text(size=22),
legend.text      =element_text(size=12)
) + stat_summary(fun.y = mean, fun.ymin = mean, fun.ymax = mean,
geom = "crossbar", width = .5)
return ( g1 )
}
box.raw = boxv (df.data, key, "log2 raw ")
df.norm = normalize.quantiles(as.matrix(df.data))
box.norm = boxv (df.norm, key, "log2 quanitle normalize ")
box.norm
str ( box.norm )
str ( df.norm )
df.norm = normalize.quantiles(df.data)
str ( df.norm )
head ( df.norm )
df.norm = normalize.quantiles(as.matrix(df.data))
head ( df.norm )
df.norm = data.frame ( normalize.quantiles(as.matrix(df.data)) )
colnames ( df.norm ) = colnames( df.data)
box.norm = boxv (df.norm, key, "log2 quanitle normalize ")
head ( df.norm )
box.norm = boxv (df.norm, key, "log2 quanitle normalize ")
str ( df.norm )
str ( df.data )
str ( df.data )
str ( key )
df.data = data.frame ( df.data )
str ( df.data )
log2.p1 = log2 ( df.data + 1 )
df.data = log2 ( df.data )
box.raw = boxv (df.data, key, "log2 raw ")
temp = df.data
key.temp = key
temp = melt ( temp )
head ( temp )
colnames(temp) = c("ID", "value")
temp$group = as.character ( sapply ( temp$ID,  function(x)  unique ( key.temp [ key.temp$ID  == x, ]$group)  ) )
ggplot(temp, aes(y=value, x=ID)) +
geom_violin()+
geom_jitter(shape=19, position=position_jitter(0.07), aes( colour=group), size=1, alpha = .5 ) +
theme_bw() +
ggtitle( title ) +
ylab(" ") +
xlab("") +
theme(legend.position="bottom", legend.title=element_blank(), legend.key = element_blank(),
axis.text.y = element_text(size=12),
axis.text.x = element_text(angle = 90, size=11.5),
axis.title.x = element_text(size=22),
axis.title.y     = element_text(size=22),
legend.text      =element_text(size=12)
) + stat_summary(fun.y = mean, fun.ymin = mean, fun.ymax = mean,
geom = "crossbar", width = .5)
boxv <- function ( temp, key.temp, title="" ){
temp = melt ( temp )
colnames(temp) = c("ID", "value")
temp$group = as.character ( sapply ( temp$ID,  function(x)  unique ( key.temp [ key.temp$ID  == x, ]$group)  ) )
g1 = ggplot(temp, aes(y=value, x=ID)) +
geom_violin()+
geom_jitter(shape=19, position=position_jitter(0.07), aes( colour=group), size=1, alpha = .5 ) +
theme_bw() +
ggtitle( title ) +
ylab(" ") +
xlab("") +
theme(legend.position="bottom", legend.title=element_blank(), legend.key = element_blank(),
axis.text.y = element_text(size=12),
axis.text.x = element_text(angle = 90, size=11.5),
axis.title.x = element_text(size=22),
axis.title.y     = element_text(size=22),
legend.text      =element_text(size=12)
) + stat_summary(fun.y = mean, fun.ymin = mean, fun.ymax = mean,
geom = "crossbar", width = .5)
return ( g1 )
}
box.raw = boxv (df.data, key, "log2 raw ")
df.norm = data.frame ( normalize.quantiles( df.data ) )
df.norm = data.frame ( normalize.quantiles( as.matrix ( df.data)  ) )
colnames ( df.norm ) = colnames( df.data)
box.norm = boxv (df.norm, key, "log2 quanitle normalize ")
box.norm
boxcox
rsn
library ( lumi )
biocLite("lumi","MASS")
biocLite("MASS")
df.norm = rsn (as.matrix ( df.data) )
library ( lumi )
df.norm = rsn (as.matrix ( df.data) )
head ( df.norm )
box.norm = boxv (df.norm, key, "log2 quanitle normalize ")
box.norm
head ( df.data )
library ( MASS )
biocLite("MASS")
library (MASS)
df.norm = data.frame ( normalize.quantiles( as.matrix ( df.data)  ) )
colnames ( df.norm ) = colnames( df.data)
box.norm = boxv (df.norm, key, "log2 quanitle normalize ")
box.norm
loess
?loess
library ( aff )
library ( affy )
temp = asinh( df.data )
head ( temp )
data <- read.xlsx( data.file , sheet="remove.dup.62Plex", colNames = TRUE)
# clean up ID names
data$ID = as.character ( sapply ( data$ID, function(x) str_match(x, ".*?\\-.*?\\-(.*?)-")[2] ) )
## create key here
key = data[ , 1:3]
## clean up data
df.data = t ( data[ ,5:ncol(data)] )
colnames ( df.data ) = data$ID
df.data = data.frame ( df.data )
temp = asinh( df.data )
temp = normalize.loess( temp , log.it = F)
library ( lumi )
head ( temp )
boxv (temp, key, "log2 quanitle normalize ")
df.norm
data <- read.xlsx( data.file , sheet="remove.dup.62Plex", colNames = TRUE)
# clean up ID names
data$ID = as.character ( sapply ( data$ID, function(x) str_match(x, ".*?\\-.*?\\-(.*?)-")[2] ) )
## create key here
key = data[ , 1:3]
## clean up data
df.data = t ( data[ ,5:ncol(data)] )
colnames ( df.data ) = data$ID
df.data = data.frame ( df.data )
data <- read.xlsx( data.file , sheet="remove.dup.62Plex", colNames = TRUE)
# clean up ID names
data$ID = as.character ( sapply ( data$ID, function(x) str_match(x, ".*?\\-.*?\\-(.*?)-")[2] ) )
## create key here
key = data[ , 1:3]
## clean up data
df.data = t ( data[ ,5:ncol(data)] )
colnames ( df.data ) = data$ID
df.data = data.frame ( df.data )
# transform log2
df.data.raw = df.data
log2.p1 = log2 ( df.data + 1 )
df.data = log2 ( df.data )
box.raw = boxv (df.data, key, "log2 no normalizatio ")
box.raw = boxv (df.data, key, "log2 no normalizatio ")
df.qn = data.frame ( normalize.quantiles( as.matrix ( df.data)  ) )
colnames ( df.qn ) = colnames( df.data)
df.qn = data.frame ( normalize.quantiles( as.matrix ( df.data)  ) )
colnames ( df.qn ) = colnames( df.data)
box.qn = boxv ( df.qn, key, "log2 quantile normalize")
df.asinh = asinh( df.data.raw )
df.asinh = normalize.loess( df.asinh , log.it = F)
box.df.asinh = boxv (df.asinh, key, " asinh loess normalized ")
box.qn
temp = melt (box.df.asinh )
temp$group = as.character ( sapply ( temp$ID,  function(x)  unique ( key [ key$ID  == x, ]$group)  ) )
colnames(temp) = c("sample", "ID", "value")
g = ggplot(temp  , aes(value, fill=group, colours=group)) + geom_density(alpha=0.1) +
theme_bw()  + facet_wrap( ~ group , ncol=1, scales = "free_y"  )
plot ( g )
temp = melt (box.df.asinh )
temp = melt (df.asinh )
temp$group = as.character ( sapply ( temp$ID,  function(x)  unique ( key [ key$ID  == x, ]$group)  ) )
colnames(temp) = c("sample", "ID", "value")
g = ggplot(temp  , aes(value, fill=group, colours=group)) + geom_density(alpha=0.1) +
theme_bw()  + facet_wrap( ~ group , ncol=1, scales = "free_y"  )
plot ( g )
temp$group = as.character ( sapply ( temp$ID,  function(x)  unique ( key [ key$ID  == x, ]$group)  ) )
head ( temp )
str ( temp )
colnames(temp) = c("ID", "value")
temp$group = as.character ( sapply ( temp$ID,  function(x)  unique ( key [ key$ID  == x, ]$group)  ) )
g = ggplot(temp  , aes(value, fill=group, colours=group)) + geom_density(alpha=0.1) +
theme_bw()  + facet_wrap( ~ group , ncol=1, scales = "free_y"  )
plot ( g )
temp = melt (df.qn )
colnames(temp) = c("ID", "value")
temp$group = as.character ( sapply ( temp$ID,  function(x)  unique ( key [ key$ID  == x, ]$group)  ) )
g = ggplot(temp  , aes(value, fill=group, colours=group)) + geom_density(alpha=0.1) +
theme_bw()  + facet_wrap( ~ group , ncol=1, scales = "free_y"  )
plot ( g )
mds.cml <-plotMDS( df.qn  )
mds.cml <- data.frame(x=mds.cml$x, y=mds.cml$y)
m1.cml <- ggplot(mds.cml, aes(x=x, y=y, col=key$group, shape=key$group ) ) +
geom_point(size=4) +
theme_bw() +
theme(legend.position="bottom", legend.title=element_blank(), legend.key = element_blank()) +
labs(x="Dimension 1", y="Dimension 2") + ggtitle("")
ml.cml
mds.cml <-plotMDS( df.qn  )
mds.cml <- data.frame(x=mds.cml$x, y=mds.cml$y)
m1.cml <- ggplot(mds.cml, aes(x=x, y=y, col=key$group, shape=key$group ) ) +
geom_point(size=4) +
theme_bw() +
theme(legend.position="bottom", legend.title=element_blank(), legend.key = element_blank()) +
labs(x="Dimension 1", y="Dimension 2") + ggtitle("")
ml.cml
ggplot(mds.cml, aes(x=x, y=y, col=key$group, shape=key$group ) ) +
geom_point(size=4) +
theme_bw() +
theme(legend.position="bottom", legend.title=element_blank(), legend.key = element_blank()) +
labs(x="Dimension 1", y="Dimension 2") + ggtitle("")
main = df.asinh
str ( main )
temp = melt ( main  )
colnames(temp) = c("ID", "value")
temp$group = as.character ( sapply ( temp$ID,  function(x)  unique ( key [ key$ID  == x, ]$group)  ) )
g = ggplot(temp  , aes(value, fill=group, colours=group)) + geom_density(alpha=0.1) +
theme_bw()  + facet_wrap( ~ group , ncol=1, scales = "free_y"  )
plot ( g )
# get and extract chex4
chex = main [ grepl ( "CHEX4", row.names(main)), , drop=FALSE]
check()
chex
main = main[ !grepl ( "CHEX", row.names(main)), ]
key2 = key
key2$chex4 = as.numeric ( chex )
mds.cml <-plotMDS( main  )
mds.cml <- data.frame(x=mds.cml$x, y=mds.cml$y)
m1.cml <- ggplot(mds.cml, aes(x=x, y=y, col=key2$chex4, shape=key2$group ) ) +
geom_point(size=4) +
theme_bw() +
theme(legend.position="bottom", legend.title=element_blank(), legend.key = element_blank()) +
labs(x="Dimension 1", y="Dimension 2") + ggtitle("")
ml.cml
m1.cml
head ( df.data)
main2 = main %*% diag(1 / key2$chex4)
main2 = plyr::aaply(main, 1, "/", key2$chex4)
main2 = plyr::aaply(main, 2, "/", key2$chex4)
head ( main2 )
head ( main2 )
head ( main )
main2 = plyr::aaply(main, 1, "/", key2$chex4)
main2 = apply ( main, 1, x/key2$chex4)
main2 = apply ( main, 1, function(x) x/key2$chex4)
head ( main2)
head ( main )
head ( chex4 )
head ( key2  )
6.743437 / 4.562733
head ( main2 )
main[1:1, ] / key2$chex4
head ( main2 )
head ( t( main2 ) )
main[1:1, ] / key2$chex4
main[1:2, ] / key2$chex4
main[1:2, ]
main[1:2, 1:5 ]
head ( key2$chex4)
5.832696/4.562733
mds.cml <-plotMDS( t( main2 )  )
mds.cml <- data.frame(x=mds.cml$x, y=mds.cml$y)
m1.cml <- ggplot(mds.cml, aes(x=x, y=y, col=key2$chex4, shape=key2$group ) ) +
geom_point(size=4) +
theme_bw() +
theme(legend.position="bottom", legend.title=element_blank(), legend.key = element_blank()) +
labs(x="Dimension 1", y="Dimension 2") + ggtitle("")
m1.cml
m1.cml <- ggplot(mds.cml, aes(x=x, y=y, col=key2$group, shape=key2$group ) ) +
geom_point(size=4) +
theme_bw() +
theme(legend.position="bottom", legend.title=element_blank(), legend.key = element_blank()) +
labs(x="Dimension 1", y="Dimension 2") + ggtitle("")
m1.cml
main2 = t ( main2 )
mds.cml <-plotMDS( main  )
mds.cml <- data.frame(x=mds.cml$x, y=mds.cml$y)
m1.cml <- ggplot(mds.cml, aes(x=x, y=y, col=key2$group, shape=key2$group ) ) +
geom_point(size=4) +
theme_bw() +
theme(legend.position="bottom", legend.title=element_blank(), legend.key = element_blank()) +
labs(x="Dimension 1", y="Dimension 2") + ggtitle("")
m1.cml
meta = apply ( main, 1, function(x) {
id = as.character ( x[["ID"]] )
group = unique ( key[ key$ID == id, ]$group )
chex4 = chex[ ,id ]
return ( c( id, group, chex4 ) )
})
meta = data.frame ( t(meta) )
meta = apply ( main, 1, function(x) {
id = as.character ( x[["ID"]] )
group = unique ( key[ key$ID == id, ]$group )
chex4 = chex[ ,id ]
return ( c( id, group, chex4 ) )
})
str ( main )
head ( main )
head ( data )
meta = apply ( main, 1, function(x) {
id = as.character ( x[["ID"]] )
group = unique ( key[ key$ID == id, ]$group )
chex4 = chex[ ,id ]
return ( c( id, group, chex4 ) )
})
meta = data.frame ( t(meta) )
meta = apply ( data, 1, function(x) {
id = as.character ( x[["ID"]] )
group = unique ( key[ key$ID == id, ]$group )
chex4 = chex[ ,id ]
return ( c( id, group, chex4 ) )
})
meta = data.frame ( t(meta) )
head ( meta )
data = cbind ( data, meta)
head ( data )
head ( data )
data <- read.xlsx( data.file , sheet="remove.dup.62Plex", colNames = TRUE)
# clean up ID names
data$ID = as.character ( sapply ( data$ID, function(x) str_match(x, ".*?\\-.*?\\-(.*?)-")[2] ) )
head ( data )
meta = apply ( data, 1, function(x) {
id = as.character ( x[["ID"]] )
group = unique ( key[ key$ID == id, ]$group )
chex4 = chex[ ,id ]
return ( c( id, group, chex4 ) )
})
meta = data.frame ( t(meta) )
head ( meta )
meta
head ( key)
head ( key2 )
head ( data )
meta = apply ( data, 1, function(x) {
id = as.character ( x[["ID"]] )
group = unique ( key[ key$ID == id, ]$group )
chex4 = chex[ ,id ]
return ( c( id, group, chex4 ) )
})
meta = data.frame ( t(meta) )
data = cbind ( data, meta)
head ( data )
